// quick sort using recursion
#include<bits/stdc++.h>
using namespace std;
int partition(int *arr,int s,int e)
{   
    int pivot = arr[s];
    int count = 0;
    for(int i = s+1 ; i <= e ; i++){
        if(arr[i] <= pivot){
            count++;
        }
    }
    int pivotIndex = s + count;
    swap(arr[s],arr[pivotIndex]);
    int i = s;
    int j = e;
    while(i < pivotIndex && j > pivotIndex){   // i and j overlap na kar jaye uske liye condition h
        while(pivot >= arr[i]){
            i++;
        }
        while(pivot < arr[j]){
            j--;
        }
        if(i < pivotIndex && j > pivotIndex){
            swap(arr[i++],arr[j--]);   // increment done becuase for hiting false condition
        }
    }
    return pivotIndex;
}
void quicksort(int *arr,int s,int e)
{
    // base case
    if(s >= e){
        return ;
    }
    // partition and rearrangement
    int p = partition(arr,s,e);
    // recursive call's for rearrangement of left part
    quicksort(arr,s,p-1);
    // recursive call's for rearrangement of right part
    quicksort(arr,p+1,e);
}
int main()
{
    int arr[] = {20,50,20,10,5};
    quicksort(arr,0,4);
    for(int i = 0 ; i < 5 ; i++){
        cout<<arr[i]<<" ";
    }
}
