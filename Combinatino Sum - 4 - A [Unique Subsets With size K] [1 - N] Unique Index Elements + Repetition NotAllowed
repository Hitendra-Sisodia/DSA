// print all unique combinations/subsets with size k
// Given: [1 - N] Unique index elements + Repetition NotAllowed

#include<bits/stdc++.h>
using namespace std;
void solve(vector<int> &output,int index,vector<vector<int> > &ans,int n,int k)
{
    if(k == 0){
        ans.push_back(output);
        return ;
    }
    if(index > n){
        return ;
    }
    // pick
    output.push_back(index);
    k -= 1;
    solve(output,index+1,ans,n,k);
    k += 1;
    output.pop_back();
    // unpick
    solve(output,index+1,ans,n,k);
}
vector<vector<int> > uniqueCombinations(int n,int k)
{
    vector<vector<int> > ans;
    vector<int> output;
    int index = 1;
    solve(output,index,ans,n,k);
    return ans;
}
int main()
{
    int n = 4;
    int k = 2;
    vector<vector<int> > finalans = uniqueCombinations(n,k);
    for(auto it: finalans){
        cout<<"[";
        for(auto i : it){
            cout<<i;
        }
        cout<<"]";
    }
}
