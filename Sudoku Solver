// solve sudoku
#include<bits/stdc++.h>
using namespace std;
bool issafe(vector<vector<char> > board,int row,int col,char c)
{
    /* we check 
    1. Horizontal ways
    2. Vertical ways
    3. 3x3 ways
    */
    for(int i = 0 ; i < 9 ; i++){
        if(board[row][i] == c){
            return false;
        }
        if(board[i][col] == c){
            return false;
        }
        if(board[3*(row/3) + i/3][3 * (col/3) + i%3] == c){
            return false;
        }
    }
    return true;
}
bool solvesudoku(vector<vector<char> > &board)
{
    for(int row = 0 ; row < board.size() ; row++){          // loop for finding empty position in rows
        for(int col = 0 ; col < board.size() ; col++){     // loop for finding empty position in columns
            // matirx ki rowth and colth position
            if(board[row][col] == '.'){
                for(char c = '1' ; c <= '9' ; c++){
                    if(issafe(board,row,col,c)){
                        board[row][col] = c;
                        if(solvesudoku(board) == true){
                            return true;
                        }
                        else{
                            // back tracking if condition is false
                            board[row][col] = '.';
                        }
                    }
                }
                // if we don't have any choices from 1 to 9 then we can return false that c is not sutiable for that position
                return false;
            }
        }
    }
    // if sudoku board gets completely filled correct then we can't hit if(board[row][col] == '.') condition
    // in that case we will return true
    return true;
}
int main()
{
    vector<vector<char> > board =  {{ '3', '1', '6', '5', '7', '8', '4', '9', '2' },{ '5', '2', '9', '1', '3', '4', '7', '6', '8' },{ '4', '8', '7', '6', '2', '9', '5', '3', '1' },{ '2', '6', '3', '.', '1', '5', '9', '8', '7' },{ '9', '7', '4', '8', '6', '.', '1', '2', '5' },{ '8', '5', '1', '7', '9', '2', '6', '4', '3' },{ '1', '3', '8', '.', '4', '7', '2', '.', '6' },{ '6', '9', '2', '3', '5', '1', '8', '7', '4' },{ '7', '4', '5', '.', '8', '6', '3', '1', '.' } };
    for(auto it: board){
        for(auto i: it){
            cout<<i<<" ";
        }
        cout<<endl;
    }
    solvesudoku(board);
    cout<<endl;
    for(auto it: board){
        for(auto i: it){
            cout<<i<<" ";
        }
        cout<<endl;
    }
}
