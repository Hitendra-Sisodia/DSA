// permutation of array using backtracking
#include<bits/stdc++.h>
using namespace std;
void solve(vector<int> arr,int index,vector<vector<int> > &ans)
{
    // base case
    if(index >= arr.size()){
        ans.push_back(arr);
        return ;
    }
    // recursive case
    for(int i = index ; i < arr.size() ; i++){
        swap(arr[index],arr[i]);
        solve(arr,index+1,ans);
        // backtrack
        swap(arr[index],arr[i]);
    }
}
vector<vector<int> > permutation(vector<int> arr)
{
    vector<vector<int> > ans;
    int index = 0;
    solve(arr,index,ans);
    return ans;
}
int main()
{
    vector<int> arr= {1,2,3};
    vector<vector<int>> finalans = permutation(arr);
    for(auto i: finalans){
        cout<<"[";
        for(auto j:i){
            cout<<j;
        }
        cout<<"]";
    }
}
