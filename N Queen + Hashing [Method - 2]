// N queen problem using hash map
#include<bits/stdc++.h>
using namespace std;
void NQueen(vector<string> board,int col,int n,vector<int> &upparDiag,vector<int> &leftRow,vector<int> &lowerDiag,vector<vector<string> > &ans)
{
    // base case
    if(col >= n){
        ans.push_back(board);
        return ;
    }
    for(int row = 0 ; row < n ; row++){
        if(upparDiag[n-1 + col - row] == 0 && leftRow[row] == 0 && lowerDiag[row + col] == 0){
            // then its must be sfe position 
            board[row][col] = 'Q';
            upparDiag[(n-1) + (col - row)] = 1;   // uppar diagonal mark as visited
            leftRow[row] = 1;
            lowerDiag[row + col] = 1;
            NQueen(board,col+1,n,upparDiag,leftRow,lowerDiag,ans);
            // BackTracking Steps
            board[row][col] = '.';
            upparDiag[(n-1) + (col - row)] = 0;   // uppar diagonal mark as Non - visited
            leftRow[row] = 0;
            lowerDiag[row + col] = 0;
        }
    }
}
int main()
{
    int n = 4;
    vector<vector<string> > ans;
    vector<string> board(n);
    string s(n,'.');
    for(int i = 0 ; i < n ; i++){
        board[i] = s;
    }
    // creation of hash maps
    vector<int> upparDiag(2*n-1,0);
    vector<int> leftRow(n);
    vector<int> lowerDiag(2*n-1,0);
    NQueen(board,0,n,upparDiag,leftRow,lowerDiag,ans);
    for(auto it: ans){
        for(auto i: it){
            cout<<i<<endl;
        }
        cout<<endl;
    }
}
