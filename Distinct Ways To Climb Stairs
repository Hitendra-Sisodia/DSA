// Distinct ways to climb stairs using dp optimization
#include<bits/stdc++.h>
using namespace std;
int reachnthstairs(int n,vector<int> dp)
{
    // base case
    if(n < 0){
        return 0;
    }
    if(n == 0){
        return 1;
    }
    if(dp[n] != -1){
        return dp[n];
    }
    return dp[n] = reachnthstairs(n-1,dp) + reachnthstairs(n-2,dp); 
}
int main()
{   
    int n = 4;
    vector<int> dp(n+1,-1);
    cout<<reachnthstairs(n,dp);
}
